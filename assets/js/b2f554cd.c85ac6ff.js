"use strict";(self.webpackChunkeigr_io=self.webpackChunkeigr_io||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"distributed-elixir-made-easy-with-spawn","metadata":{"permalink":"/blog/distributed-elixir-made-easy-with-spawn","editUrl":"https://github.com/eigr/eigr.github.io/edit/main/website/blog/blog/2023-12-03-distributed-elixir-made-easy.md","source":"@site/blog/2023-12-03-distributed-elixir-made-easy.md","title":"Distributed Elixir made easy with Spawn","description":"Hello Elixir enthusiasts! \ud83d\ude80 As the tech landscape evolves, so should our tools and approaches to development. Today, I\'m excited to introduce you to a significant advancement in Elixir development that can reshape how we build distributed systems \u2013 I present to you Spawn.","date":"2023-12-03T00:00:00.000Z","formattedDate":"December 3, 2023","tags":[{"label":"spawn","permalink":"/blog/tags/spawn"},{"label":"serverless","permalink":"/blog/tags/serverless"},{"label":"elixir","permalink":"/blog/tags/elixir"},{"label":"distributed","permalink":"/blog/tags/distributed"},{"label":"durable computing","permalink":"/blog/tags/durable-computing"}],"readingTime":9.695,"hasTruncateMarker":false,"authors":[{"name":"Elias Dal Ben Arruda","title":"eigr.io \u2013 Core Team","url":"https://github.com/eliasdarruda","imageURL":"https://avatars.githubusercontent.com/u/19327513?v=4","key":"eliasdarruda"},{"name":"Adriano Santos","title":"eigr.io \u2013 Core Team","url":"https://github.com/sleipnir","imageURL":"https://avatars.githubusercontent.com/u/342502?v=4","key":"sleipnir"}],"frontMatter":{"slug":"distributed-elixir-made-easy-with-spawn","title":"Distributed Elixir made easy with Spawn","authors":["eliasdarruda","sleipnir"],"tags":["spawn","serverless","elixir","distributed","durable computing"],"draft":false},"nextItem":{"title":"Beyond Monoliths and Microservices","permalink":"/blog/beyond-monoliths-and-microservices"}},"content":"Hello Elixir enthusiasts! \ud83d\ude80 As the tech landscape evolves, so should our tools and approaches to development. Today, I\'m excited to introduce you to a significant advancement in Elixir development that can reshape how we build distributed systems \u2013 I present to you Spawn.\\n\\n## The Elixir Actors Dilemma\\n\\nWe\'ve all been there \u2013 struck by that stroke of genius while working with Elixir. The allure of in-memory state storage, backed by the reliability of Erlang/OTP, seems like a dream come true. But reality hits hard, especially in the realm of production environments where Kubernetes often plays a pivotal role. Managing multiple servers autonomously, especially in distributed systems, can quickly turn our dream into a complex nightmare.\\n\\n## Enter Spawn: A New Approach to Actors\\n\\n[**Spawn**](https://github.com/eigr/spawn) is not just another framework; it\'s a paradigm shift in how we implement code. Imagine a world where you can care less about the underlying infrastructure and instead focus on crafting the domain-specific logic that truly matters. That\'s precisely what Spawn brings to the table.\\n\\nLet\'s delve into a quick comparison between a traditional GenServer approach and the innovative Spawn Actor using the [***Spawn Elixir SDK***](https://github.com/eigr/spawn/tree/main/spawn_sdk/spawn_sdk).\\n\\n\\n### Consider a GenServer that does the following:\\n\\n```ELIXIR\\ndefmodule Incrementor do\\n  use GenServer\\n\\n  defmodule State do\\n    defstruct [total: 0]\\n  end\\n\\n  def init(_), do: {:ok, %State{total: 0}}\\n\\n  def handle_call({:add, value}, _from, state) do\\n    new_total = state.total + value\\n\\n    {:reply, {:ok, %{total: new_total}}, %State{state | total: new_total}}\\n  end\\nend\\n```\\n\\nIf we execute it, as you probably now already, we can add a specified value to the total stored in memory, and calling add will always return the total amount stored in memory.\\n\\n```Elixir\\niex(1)> {:ok, pid} = GenServer.start_link(Incrementor, [])\\niex(2)> GenServer.call(pid, {:add, 1})\\n{:ok, %{total: 1}}\\n\\niex(3)> GenServer.call(pid, {:add, 1})\\n{:ok, %{total: 2}}\\n```\\n\\n### With Spawn, the same definition would look like:\\n\\nOur process defined by the `GenServer`, we call it an _Actor_.\\n\\n```ELIXIR\\ndefmodule IncrementorActor do\\n  use SpawnSdk.Actor,\\n    name: \\"incrementor\\",\\n    kind: :unamed,\\n    state_type: :json,\\n    deactivate_timeout: 30_000,\\n    snapshot_timeout: 10_000\\n\\n  defmodule State do\\n    @derive {Jason.Encoder, only: [:total]}\\n    defstruct [total: 0]\\n  end\\n\\n  defact init(%Context{} = ctx), do: Value.noreply_state!(ctx.state || %State{})\\n\\n  defact add(%{value: value}, %Context{} = ctx) do\\n    new_total = ctx.state.total + value\\n\\n    Value.of()\\n    |> Value.state(%State{total: new_total})\\n    |> Value.response(%{total: new_total})\\n  end\\nend\\n```\\n\\nOur application would look like:\\n\\n```ELIXIR\\ndefmodule Example.Application do\\n  @moduledoc false\\n  use Application\\n\\n  @impl true\\n  def start(_type, _args) do\\n    children = [\\n      {\\n        SpawnSdk.System.Supervisor,\\n        system: \\"spawn-system\\",\\n        actors: [\\n          IncrementorActor\\n        ]\\n      }\\n    ]\\n\\n    opts = [strategy: :one_for_one, name: Example.Supervisor]\\n    Supervisor.start_link(children, opts)\\n  end\\nend\\n```\\n\\nAnd the SDK can be installed in your Elixir project with:\\n\\n```ELIXIR\\n[\\n  {:spawn_sdk, \\"~> 1.0.0\\"},\\n  # if using stateful actors\\n  # {:spawn_statestores_mysql, \\"~> 1.0.0\\"}\\n  # {:spawn_statestores_postgres, \\"~> 1.0.0\\"}\\n  # ... others\\n]\\n```\\n\\nWhen using a statestore, you need to define a statestore key in `config.exs` or using `SPAWN_STATESTORE_KEY` environment variable to make sure your actor state is properly encrypted.\\n> **NOTE:** It is **recommended** to securely store the key in the environment where it is being used.\\n\\n```ELIXIR\\nconfig :spawn_statestores, statestore_key: \\"secure_database_key\\"\\n```\\n\\nHaving that defined, the same for `Calling` or `Casting` a process in a GenServer, we do it with `invoke`.\\n\\nPassing any message we want in the payload attribute, it needs to be a struct or map that can be encoded to JSON or a protobuf struct.\\n\\n```Elixir\\niex(1)> SpawnSdk.invoke(\\"incrementor\\", system: \\"spawn-system\\", action: \\"add\\", payload: %{value: 1})\\n{:ok, %{total: 1}}\\n```\\n\\n> **_NOTE_**: We **recommend** to use protobufs as payload and also the state definition, with: `state_type: Protos.YourStateType`, however for this example for the sake of simplicity we are using JSON.\\n\\n## Unpacking the Magic: Answers to Your Questions\\n\\n1. What exactly is \\"spawn-system\\"?\\n\\nSpawn operates as a platform that manages infrastructure for you. \\"spawn-system\\" is a configuration entity encapsulating multiple actors within a meaningful context.\\n\\n2. Why is it an SDK?\\n\\nSpawn embraces a multi-language approach. SDKs allow different actors, even in different languages, to register with Spawn. For instance, you could have Elixir and NodeJS actors running the same logic seamlessly.\\n\\n3. How do I run it?\\n\\nIn development, you can use Spawn as a lib. For production, use Kubernetes CRDs provided by Spawn for easy and scalable deployment.\\n\\n4. How do we handle state persistence?\\n\\nSpawn intelligently handles state persistence through well-defined timeouts and snapshot mechanisms, ensuring reliability even during rollouts.\\n\\n5. Why not just use a GenServer?\\n\\nManaging a distributed system with GenServer requires tackling numerous challenges. Spawn abstracts away these complexities, allowing you to focus on your domain logic without getting lost in infrastructure intricacies.\\n\\nTwo items above deserve a little more comment:\\n\\n### Actor System\\n\\nSpawn is a platform that also handles infrastructure for you, we run on top of kubernetes and have defined some [**Kubernetes CRDs**](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/) that helps you configure the clustering and lifecycle of your actors.\\n\\nA system is an entity that encapsulates multiple Actors in a context that makes sense for you.\\n\\nWe can configure one using the pre-defined Spawn CRDs, and we will also be configuring here which persistent database we are going to use to hold our Actors state.\\n\\n### SDKs\\n\\nWe can have multiple actors in the same system, with different SDKs registering those actors.\\nWe call each deployment that uses an SDK an \\"ActorHost.\\"\\n\\nIn our example, we could have two SDKs, Elixir and NodeJS, running the same actor or different ones.\\nSpawn will then forward any invocations for one of those registered SDKs, with the specified implementation for each action.\\nYou can even invoke an actor registered in a different system or in the same system from another SDK.\\n\\nFor instance, if we wanted to invoke the same actor we wrote but in a [NodeJS ActorHost](https://github.com/eigr/spawn-node-sdk), it would look like this:\\n\\n```TS\\nimport spawn from \'@eigr/spawn-sdk\'\\n\\nconst response = await spawn.invoke(\'incrementor\', {\\n  action: \'add\',\\n  system: \'spawn-system\',\\n  payload: {value: 5}\\n})\\n\\nconsole.log(response)\\n// { total: 6 }\\n```\\n\\nThis way, we can interact with each actor globally, across different Systems and ActorHosts, while still maintaining the same state handling mechanism. And the best part? We can achieve all of this without the need for transactions, locks, or any additional infrastructure to support sequential state write changes of that nature.\\n\\n### That sounds magical, how do I run it?\\n\\nIn development mode for Elixir, you can take advantage of using Spawn as a lib, you\'ll be able to use all the features you wan\'t in a single runtime.\\n\\nHowever for production we **recommend** using our CRDs set up for you.\\n\\nFirst of all you need to install our k8s CRD with the following manifest (using kubectl):\\n\\n```BASH\\nkubectl create ns eigr-functions && curl -L https://github.com/eigr/spawn/releases/download/v1.0.0/manifest.yaml | kubectl apply -f -\\n```\\n\\n> **_NOTE:_** You need to inform the desired release version. Check our github to see the latest one released.\\n\\nAfter installing it successfully, you need now to configure your System:\\n\\n```yaml\\napiVersion: spawn-eigr.io/v1\\nkind: ActorSystem\\nmetadata:\\n  name: spawn-system # Mandatory. Name of the ActorSystem\\n  namespace: default # Optional. Default namespace is \\"default\\"\\nspec:\\n  statestore:\\n    type: MySql # Valid are [Postgres, MySql, MariaDB, Sqlite, MSSQL, CockroachDB]\\n    credentialsSecretRef: mysql-connection-secret # The secret containing connection params created in the previous step.\\n    pool: # Optional\\n      size: \\"10\\"\\n```\\n\\nYou can generate the credentialsSecret or use whatever secret you are using to store your database credentials.\\nAn example would be, note that the secret needs to be created at the namespace `eigr-functions`.\\n\\n```bash\\nkubectl create secret generic mysql-connection-secret -n eigr-functions \\\\\\n  --from-literal=database=eigr-functions-db \\\\\\n  --from-literal=host=\'mysql\' \\\\\\n  --from-literal=port=\'3306\' \\\\\\n  --from-literal=username=\'admin\' \\\\\\n  --from-literal=password=\'admin\' \\\\\\n  --from-literal=encryptionKey=$(openssl rand -base64 32)\\n```\\n\\nAfter installing the system, you will need to register your ActorHost, that can look like:\\n\\n```yaml\\napiVersion: spawn-eigr.io/v1\\nkind: ActorHost\\nmetadata:\\n  name: elixir-example\\n  namespace: default\\n  annotations:\\n    spawn-eigr.io/actor-system: spawn-system\\nspec:\\n  host:\\n    image: org/your-host-image:0.0.1\\n    embedded: true # this is only for Elixir Sdks, you can ignore this if you will use another language\\n    ports:\\n      - name: \\"http\\"\\n        containerPort: 8800\\n  autoscaler:\\n    min: 1\\n    max: 2\\n```\\n\\nJust by applying this configuration, and having a container that has the application with the example we wrote in the start of the article, we should see\\nthe instances starting that should handle the clustering and all the heavy insfrastructure work for you.\\n\\n## Managing State Resilience with Spawn\\n\\nIn the realm of Spawn, we prioritize the resilience of your application\'s state. Each actor in Spawn comes with configurable parameters, namely the snapshot_timeout and deactivate_timeout. Let\'s delve into these settings:\\n\\n- **deactivate_timeout** determines the duration (in milliseconds) your actor remains actively in memory, even when not in use.\\n\\n- **snapshot_timeout** how frequently snapshots of your actor\'s state are saved in your persistent storage.\\n\\nThe magic unfolds after an actor is deactivated, triggered either by the specified timeout or during a Kubernetes rollout. In this scenario, Spawn meticulously manages the lifecycle of each process, ensuring that the state is gracefully saved in the configured persistent storage.\\n\\nHere\'s the key assurance: even in the face of failures, crashes, or net-splits, Spawn guarantees that the state of your application will always revert to the last valid state. This means if an instance fails, another node seamlessly takes over from where it left off, ensuring the continuity and integrity of your application\'s data. Our meticulous tuning of Custom Resource Definitions (CRDs) and signal handling ensures that you won\'t lose data during rollouts or network partitions.\\n\\nWith Spawn, you can confidently embrace a resilient state management model, where the reliability and consistency of your application\'s data are at the forefront of our design philosophy. \\n\\n## Unleashing Gains in Agility and Innovation with Spawn\\n\\nBeyond the facade of extensive configurations lies a treasure trove of advantages awaiting exploration. Spawn not only simplifies but significantly enriches your development experience. Imagine bidding farewell to the complexities of defining Kubernetes resources, the intricacies of rollouts, the considerations of HPA, and the worries of scalability, network configurations, and system integrity assessments.\\n\\nSpawn emerges as the driving force behind a newfound sense of agility and innovation. It liberates you from the burdensome aspects of infrastructure management, allowing you to redirect your focus towards what truly matters \u2013 crafting innovative solutions. Step into a future where complexities dissolve, and your journey into agile and innovative Elixir development begins with a resounding hello! \\n\\nIf you choose to go down that path, you will need to face at least the following challenges:\\n\\n- Ensuring proper handling of connections between multiple nodes in your Erlang cluster.\\n- Ensuring reliable and synchronized data rollouts to avoid message or state loss during instances rolling out.\\n- Implementing effective persistence mechanisms to recover data in the event of netsplit scenarios, preventing data loss.\\n- Managing the process lifecycle to ensure predictable recovery and maintain a consistent state in case of errors.\\n- Designing a well-defined API that integrates your processes seamlessly with other systems, ensuring message synchronization.\\n- Establishing a reliable distribution mechanism for sending messages to actors within your own edge, with the ability to synchronize them later.\\n- Mitigating process queue bottlenecks to optimize performance and prevent delays.\\n- Ensuring atomicity in a distributed system, maintaining data consistency and integrity.\\n- Ensuring that you can concentrate on your domain-specific code without being burdened by unnecessary complexities and boilerplate.\\n- Implementing seamless integration patterns, including process pipelines, customized activators, workflows, and effective management of side effects, among others.\\n- Developing and managing infrastructure code related to brokers, caching, and other components.\\n\\n## Conclusion\\n\\nThis is more than just a practical example; it\'s an invitation to explore the full potential of Spawn. For a deeper dive into the concepts and foundations, refer to our [Spawn Full Documentation](https://github.com/eigr/spawn) and our insightful article [Beyond Monoliths and Microservices](https://eigr.io/blog/beyond-monoliths-and-microservices/).\\n\\nReady to elevate your Elixir development experience? Embrace the future with Spawn. Happy coding! \ud83d\ude80\u2728"},{"id":"beyond-monoliths-and-microservices","metadata":{"permalink":"/blog/beyond-monoliths-and-microservices","editUrl":"https://github.com/eigr/eigr.github.io/edit/main/website/blog/blog/2023-05-10-beyond-monoliths-and-microservices.md","source":"@site/blog/2023-05-10-beyond-monoliths-and-microservices.md","title":"Beyond Monoliths and Microservices","description":"Recently a article","date":"2023-05-10T00:00:00.000Z","formattedDate":"May 10, 2023","tags":[{"label":"spawn","permalink":"/blog/tags/spawn"},{"label":"serverless","permalink":"/blog/tags/serverless"},{"label":"eigr-functions","permalink":"/blog/tags/eigr-functions"},{"label":"design","permalink":"/blog/tags/design"},{"label":"architect","permalink":"/blog/tags/architect"}],"readingTime":8.4,"hasTruncateMarker":false,"authors":[{"name":"Adriano Santos","title":"eigr.io \u2013 Core Team","url":"https://github.com/sleipnir","imageURL":"https://avatars.githubusercontent.com/u/342502?v=4","key":"sleipnir"},{"name":"Marcel Lanz","title":"eigr.io \u2013 Core Team","url":"https://github.com/marcellanz","imageURL":"https://avatars.githubusercontent.com/u/12616445?v=4","key":"marcellanz"}],"frontMatter":{"slug":"beyond-monoliths-and-microservices","title":"Beyond Monoliths and Microservices","authors":["sleipnir","marcellanz"],"tags":["spawn","serverless","eigr-functions","design","architect"],"draft":false},"prevItem":{"title":"Distributed Elixir made easy with Spawn","permalink":"/blog/distributed-elixir-made-easy-with-spawn"},"nextItem":{"title":"Hello Spawn! \u2013 The Actor Mesh","permalink":"/blog/spawn-the-actor-mesh"}},"content":"Recently a [article](https://www.primevideotech.com/video-streaming/scaling-up-the-prime-video-audio-video-monitoring-service-and-reducing-costs-by-90)\\nlaunched by the Amazon Prime team reactivated the Monoliths versus Microservices discussion. It is remarkable, and often reproachable, \\nhow many fervent feelings there are around this already old discussion.\\nI\'ve always wondered what the point really was between these two conflicting worldviews. And I could never understand why\\nso much energy is expended on this type of discussion.\\n\\nIn this article we intend to introduce you to why it\'s time to move forward and how our Spawn technology can help developers \\nlet go of these age-old issues, and that do not add much value to the business.\\n\\n## Monoliths\\n\\n![Monoliths](/img/monoliths.jpg \\"Monoliths\\")\\n\\nMonolithic architecture is given by a single, undivided system that runs in a single process, a software application in which different components are linked to a single program within a single platform.\\nAs the entire system is in a single block, its initial development can be more agile, making it possible to develop an application in less time and with less initial complexity, notice the initial word.\\n\\nAs a monolithic application evolves, several classes, modules, methods or functions are added to this same code and process.\\nAnother point is that monolithic applications tend not to scale horizontally well, since all the general functionality of a system is tied to a single process it is expected that this type of application scales better vertically than horizontally. This particular characteristic also makes it difficult to implement this type of system in environments such as Kubernetes or other types of Cloud environments, notice that I said difficult and not unfeasible.\\n\\nAnd this is where the problems with this type of architecture usually start to appear. In other words, the issue with monoliths seems to be directly related to the scale of the system in question. The more complexity you add, the harder it gets to maintain, which requires more complexity to mitigate the problem, which makes it harder to maintain.... well, you get the point.\\nTo get around these effects, there are many software engineering patterns that help to mitigate such failures (facades, ports, adapters, interface programming and so on), all this additional complexity turns out to be a good price to pay for its defenders, to a certain extent.\\n\\n## Microservices\\n\\n![Microservices](/img/microservices.jpg \\"Microservices\\")\\n\\nWhat differentiates the microservices architecture from more traditional monolithic approaches is how it decomposes the application into smaller units. Each unit in turn is called a service and can be created and deployed independently. In other words, each individual service can work or fail without compromising the others. This helps you embrace the technology side of DevOps and make constant iteration and constant delivery (CI/CD) more streamlined and feasible (at least in theory).\\nIn terms of scaling microservices tend to scale better horizontally than vertically and this in turn is better for infrastructures powered by Kubernetes, Serververless, or even other types of Cloud environments.\\n\\nBut not everything is flowers with microservices. Microservices, generally, increase the complexity in managing failures and in the control of expenses with infrastructure. Developers had to become experts in distributed and large-scale systems.\\nTo deal with it all, over the years several techniques have emerged to avoid various problems of distributed systems, as well as the advent of Observability and FinOps techniques that helped to control infrastructure costs, allowed the architecture of microservices to become extremely popular.\\n\\n## Spawn and Beyond\\n\\nI could write dozens of pros and cons of each of these architectures and, at least for us, I would never come up with an outright winner. The undeniable fact is that both have great strengths and equally great flaws. We are without a winner and therefore we need to let go and go further.\\n\\nIn simple terms, what we here in the Eigr community believe is that developers, in general, need a platform that is, among other things, be simpler, dynamic, vendor lock free, focused on the business domain and not on precious technicalities, and that adapts well to the granularity your business requirements demand.\\n\\nNow let\'s introduce our Spawn technology and try to explore a little bit of how it can help us go further.\\n\\n[Spawn](https://github.com/eigr/spawn) is primarily based on three very powerful abstractions, the [Sidecar Pattern](https://thenewstack.io/operators-and-sidecars-are-the-new-model-for-software-delivery/), the [Actor Model](https://www.brianstorti.com/the-actor-model/) and the [Serverless](https://www2.eecs.berkeley.edu/Pubs/TechRpts/2019/EECS-2019-3.pdf). The former allows you to deploy an application\'s components in a separate process or container providing isolation and encapsulation. This pattern enables applications to be composed of heterogeneous technologies and components, while allowing this separate process to handle the infrastructure layers without affecting the evolution of your business code. In turn, the second is a fascinating and relatively simple alternative for the development of distributed and concurrent systems. This model allows you to decompose your system into small units, called actors, that communicate only by passing messages. Actors encapsulate state and behavior in a single unit, and are lock-free, that is, when programming with actors you are free of semaphore, mutex and any type of synchronizing code. And finally Serverless lets developers focus on their code without worrying about the infrastructure. Using Kubernetes as an orchestrator for our serverless workloads we can provide a self managed platform without forcing the developer to be tied to any existing public cloud offerings. Free from blockages! \\n\\nHowever, it goes beyond the basics of the Actor Model by exposing several software patterns in a simplified way for the developer. Spawn is also domain oriented to your business, allowing you to focus directly on the business problem, while the Spawn runtime handles things like state management and persistence, caching, inter-process calls, scalability, cluster management, scaling up and down, integration with external middleware, among many other non-functional requirements that software usually needs to achieve its final goals. \\n\\nSpawn is also a polyglot platform, allowing you to write Actors in different languages and allowing them to communicate with each other in a totally transparent way without the need to define REST or RPC interfaces between your components. Being based on the powerful [Erlang technology](https://www.wired.com/2015/09/whatsapp-serves-900-million-users-50-engineers) you get the best of what the, [battle tested](https://elixir-lang.org/blog/2020/10/08/real-time-communication-at-scale-with-elixir-at-discord/), [Erlang Virtual Machine is capable of providing](https://serokell.io/blog/introduction-to-erlang) without giving up your natural domain language, be it  [Java, Typescript, Elixir](https://github.com/eigr/spawn#sdks), or another.\\n\\nNow that we have a basic idea about Spawn we can move on to how it can help us move beyond the discussion of Monoliths and Microservices.\\n\\n## Services, Applications, and Granularity\\n\\nTo understand how Spawn can help us move the discussion forward, we first need to understand how Spawn organizes its deployable components.\\nThe most basic unit of Spawn is the Actor, it is through Actors that developers can express their domain problems and as we said before the Actor is responsible for encapsulating the state and its associated behavior in itself.\\n\\n![Actors](/img/actors.jpg \\"Actors\\")    \\n\\nThat said, a Spawn application in a simplified way is nothing more than a series of Actors organized in an deployment unit that we can call service or application, but which in our terminology we call ActorHost. An ActorHost is the deployable unit which is made up of the host container (where the developer works) plus the proxy container which is where the actors actually perform their tasks.\\n\\n![ActorHost](/img/actor-host.jpg \\"Actor Host\\")\\n\\nYou can have hundreds or even thousands of actors running on a single ActorHost and that in turn can have multiple replicas running on a cluster. As Spawn Actors are activated only when there is work to be done and are deactivated after a period of inactivity, the workloads are distributed among different replicas of the same ActorHost. From the developer\'s point of view, it doesn\'t matter because the only thing he needs to be able to send a message to an actor is his name. No complicated APIs with additional worries like service discovery, circuit breakers or anything else.\\n\\n![Replicas](/img/actor-host-replicas.jpg \\"Actor Host Distribution\\")\\n\\nAnd finally your ActorHost are grouped within a more general system that we call ActorSystem. All ActorHost applications within the same actor system actively communicate with each other forming a real cluster of nodes. Think of an ActorSystem as a distributed container. An actor within an actor system can still communicate with another actor within another actor system in a transparent way for the developer, but the difference is that this communication is done across different networks. That is, ActorSystem provides the network isolation of a set of ActorHost, allowing even very large systems to maintain a high level of isolation and allowing better resource management and avoiding non-essential communication overhead.\\n\\n![ActorSystem](/img/actor-systems.jpg \\"Actor Systems\\")\\n\\nAs seen above through Spawn you can talk to different grain sizes to achieve your goals without having to think too hard about how to connect the parts. You can group all your actors within a single application or break it into smaller parts, but the way you interact between these components will not change, this type of architecture has become an [industry trend](https://www.infoq.com/news/2023/03/google-weaver-framework/) and we proud to say that Spawn thought of all this a long time ago and has leveraged this initiative with our Spawn technology.\\n\\n## Conclusion\\n\\nThis whole discussion around Microservices vs Monoliths is a lot of fun and a excellent mental exercise, but we as software engineers must remember\\nthat at the end of the day, it is our deliveries of value to the business that will make the difference. Spawn with its polyglot serverless experience, using the full potential of Cloud\'s open standards can help you take big steps in that direction. Without you having to waste precious hours around such warm discussions and far from the big goal. Solve your business problems!\\n\\nIn this post we demonstrate that our Spawn technology based on important industry standards and focused on bringing agility to developers\' day-to-day is a valuable tool for you to achieve your business goals without having to give up the scalability and resiliency that the today\'s world demands. We could talk a lot more about Spawn (Activators, Workflows, exposing APIs in a declarative way and much more) but that will be for other posts, today we focus on how Spawn will help you get out of this discussion about Monolithics and Microservices. See you again soon!"},{"id":"spawn-the-actor-mesh","metadata":{"permalink":"/blog/spawn-the-actor-mesh","editUrl":"https://github.com/eigr/eigr.github.io/edit/main/website/blog/blog/2022-09-08-spawn-the-actor-mesh.md","source":"@site/blog/2022-09-08-spawn-the-actor-mesh.md","title":"Hello Spawn! \u2013 The Actor Mesh","description":"Lately we decided to promote Spawn from eigr-labs to the main eigr github organization//github.com/eigr/spawn.","date":"2022-09-08T00:00:00.000Z","formattedDate":"September 8, 2022","tags":[{"label":"serverless","permalink":"/blog/tags/serverless"},{"label":"cloudstate","permalink":"/blog/tags/cloudstate"},{"label":"eigr-functions","permalink":"/blog/tags/eigr-functions"},{"label":"project","permalink":"/blog/tags/project"},{"label":"status","permalink":"/blog/tags/status"}],"readingTime":2.615,"hasTruncateMarker":false,"authors":[{"name":"Adriano Santos","title":"eigr.io \u2013 Core Team","url":"https://github.com/sleipnir","imageURL":"https://avatars.githubusercontent.com/u/342502?v=4","key":"sleipnir"},{"name":"Marcel Lanz","title":"eigr.io \u2013 Core Team","url":"https://github.com/marcellanz","imageURL":"https://avatars.githubusercontent.com/u/12616445?v=4","key":"marcellanz"}],"frontMatter":{"slug":"spawn-the-actor-mesh","title":"Hello Spawn! \u2013 The Actor Mesh","authors":["sleipnir","marcellanz"],"tags":["serverless","cloudstate","eigr-functions","project","status"],"draft":false},"prevItem":{"title":"Beyond Monoliths and Microservices","permalink":"/blog/beyond-monoliths-and-microservices"},"nextItem":{"title":"May 2022 \u2013 Status of the Project","permalink":"/blog/current-status-of-the-project"}},"content":"Lately we decided to promote Spawn from eigr-labs to the main eigr github organization: https://github.com/eigr/spawn.\\nAt the same time we archived the massa proxy repository and explained our motivation behind it.\\n\\nIt has been three years ago when we met in a new open source community while we tried to make a\\nthen shiny new project successful\u2013https://cloudstate.io/. While we\'ve discovered and also implemented a communications\\nprocotol for a multitude of programming languages, we constantly iterated on ideas how to build a system that is able to\\nscale and also being usable on many places not only on backend services. At the time we discovered the serverless space,\\nhaving also solved the stateful aspect of it by using a then promising new procotol and concept called Cloudstate. After\\nsome re-priorization with the project as a whole, the core OSS community moved on to build eigr.io and discover our\\nideas under this new umbrella organization https://eigr.io/.\\n\\n## The Actor Mesh\\n\\n![The Actor Mesh](/img/the_actor_mesh.svg \\"The Actor Mesh\\")\\n\\nOver the last couple of months, Spawn has been shaped by our vision to have a simpler and more focused way to bring an\\nactor system to a polyglot environment, where the way of how components can interact like Actors and Processes do, is\\nnot that well known in other languages. eigr/Massa always was about to solve the challenge of stateful serverless, like\\nit took the vision from its originating project. But at the same time Massa also tried always to solve two things at the\\nsame time. Building a polyglot serverless runtime and also solve the aspect of statefull serverless has been sometimes\\nbeing too much at the same time. Spawn is a focused effort to solve one problem first, and then, being enabled to build\\nthe stateful aspect of serverless on top of it. In this regard, we focus now on something that is that enabler and\\nperhaps one for other problems to solve.\\n\\nThis has been the work of ours lead by Adriano with help from Wesley and Elias; beside that I was able to participate a\\nbit in discussions and presenting our project a two occasions over the last year. I\'m looking forward to see Spawn\\ngrowing into something really cool, special and useful. There is still a lot of work ahead of us and we\'re very exited\\nto see how we can collaborate and grow as a project.\\n\\n## The Future of Eigr is based on Spawn\\n\\nWe are 100% focused on making Spawn a robust, scalable, dynamic and expandable platform, taking us far beyond what\\nwe imagined we were capable of in the initial Cloudstate project and with our previous implementation of Massa.\\nMassa has served us brilliantly as a means of experimentation, and now I feel deeply that we are ready to accomplish\\nwhatever we set out to do.\\n\\nWe invite everyone who is here to download and try Spawn and that we are ready to welcome those who want to contribute,\\nwhether with doubts, suggestions, a little code is also welcome, or a text review, any contribution is welcome. We\\ngreatly admire all of you who are interested in our project."},{"id":"current-status-of-the-project","metadata":{"permalink":"/blog/current-status-of-the-project","editUrl":"https://github.com/eigr/eigr.github.io/edit/main/website/blog/blog/2022-05-25-current-state-of-project.md","source":"@site/blog/2022-05-25-current-state-of-project.md","title":"May 2022 \u2013 Status of the Project","description":"My name is Adriano, I\'m a software engineer, I\'m 40 years old, I\'m Brazilian, and I\'ve been in the technology area for over 20 years on different fronts and having worked in a long list of companies, I\'m also the co-founder of the Eigr project together with @marcellanz and @guyso, previously the three of us were core members of the Cloudstate project and mainly worked on the supporting SDKs, but we also participated in the central development of Cloudstate technology and collaborated a lot on the development mainly of its protocol.","date":"2022-05-25T00:00:00.000Z","formattedDate":"May 25, 2022","tags":[{"label":"serverless","permalink":"/blog/tags/serverless"},{"label":"cloudstate","permalink":"/blog/tags/cloudstate"},{"label":"eigr-functions","permalink":"/blog/tags/eigr-functions"},{"label":"project","permalink":"/blog/tags/project"},{"label":"status","permalink":"/blog/tags/status"}],"readingTime":4.075,"hasTruncateMarker":false,"authors":[{"name":"Adriano Santos","title":"eigr.io \u2013 Core Team","url":"https://github.com/sleipnir","imageURL":"https://avatars.githubusercontent.com/u/342502?v=4","key":"sleipnir"}],"frontMatter":{"slug":"current-status-of-the-project","title":"May 2022 \u2013 Status of the Project","authors":["sleipnir"],"tags":["serverless","cloudstate","eigr-functions","project","status"],"draft":false},"prevItem":{"title":"Hello Spawn! \u2013 The Actor Mesh","permalink":"/blog/spawn-the-actor-mesh"},"nextItem":{"title":"CodeBEAM Europe, Stockholm 2022","permalink":"/blog/codebeam-sto-2022"}},"content":"My name is Adriano, I\'m a software engineer, I\'m 40 years old, I\'m Brazilian, and I\'ve been in the technology area for over 20 years on different fronts and having worked in a long list of companies, I\'m also the co-founder of the Eigr project together with [@marcellanz](https://github.com/marcellanz) and [@guyso](https://github.com/ralphlaude), previously the three of us were core members of the [Cloudstate](https://cloudstate.io/) project and mainly worked on the supporting SDKs, but we also participated in the central development of Cloudstate technology and collaborated a lot on the development mainly of its protocol.\\n\\nI see that many of you have just arrived here and that\'s why I think it\'s important to give an overview of what we do and talk a little about the current status of the project.\\n\\nWell, let\'s go!\\n\\n## Overview:\\n\\nOur ecosystem is called Eigr, and we focus mainly on the following projects:\\n\\n* [Eigr Functions Controller](https://github.com/eigr/eigr-functions-controller): it\'s our deployment brain in Kubernetes, it controls the entire lifecycle of our sidecar along with user functions.\\n\\n* [Massa](https://github.com/eigr/massa): is a Sidecar Proxy and part of the _Eigr Functions_ offering that aims to \\n  provide a high-level abstraction for General Purpose Stateful Serverless application development.\\n\\nMassa is responsible for managing the entire data access infrastructure for user functions, as well as other technical tasks such as providing the implementation of the user contract via [gRPC](https://grpc.io/) to the outside world, [transcoding HTTP requests to gRPC](https://cloud.google.com/endpoints/docs/grpc/transcoding), caching, making requests to external sources when requested and other tasks that would once have to be performed by the developer directly in his application.\\n\\nWith Massa the developer only has to worry about their domain objects and their user service interface via a \\ncontract-first declarative approach. These two components together form Eigr Functions.\\n\\nIn addition to these projects, we also work on several other R&D projects that allow us to understand certain parts \\nof the problem we are trying to solve and thus apply the acquired knowledge to the main projects. Research projects worth noting are the following:\\n\\n* [Falco](https://github.com/eigr/falco): A fork of the elixir-grpc project where we try to improve performance and provide a replacement for the original project that is not being updated by the community that created it. Its development continues in research status.\\n\\n* [Steinadler](https://github.com/eigr-labs/steinadler): A high-level alternative to Erlang Distribution. While we are aware of the incredible capabilities of the Erlang Distribution, we also know that there are numerous deficiencies in this protocol that we are trying to address. Its development is currently at a standstill.\\n\\n* [Spawn](https://github.com/eigr-labs/spawn): The **Actor Mesh Framework** is based on the [sidecar proxy pattern]\\n  (https://dzone.com/articles/sidecar-design-pattern-in-your-microservices-ecosy-1) to provide the multi-language \\n  Actor Model framework. Spawns\' technology-stack on top of the BEAM VM (the Erlang virtual machine) provides support \\n  for different languages from its native Actor model. Spawn is made up of the following components:\\n\\n    1. A semantic protocol based on Protocol Buffers.\\n\\n    2. A Sidecar Proxy written in Elixir that implements this protocol as well as persistent storage adapters.\\n\\n    3. SDKs to support different programming languages.\\n\\n  Spawn is currently in full development where its main parts will likely be incorporated into the core of Massa.\\n\\n* Astreu (https://github.com/eigr/Astreu): High-performance Messaging System based on a gRPC protocol written in \\n  Elixir. Your development is on hold (usable for testing).\\n\\n:::info\\n\\nIn addition to these projects we have the Eigr Functions SDKs which are written in some programming languages \u200b\u200blike \\nElixir, Go, Java and others. Each of these projects is in different phases of development but none are yet readily \\nfunctional.\\n\\n:::\\n\\n## Eigr Functions!\\n\\nCurrently, the Massa project, where our greatest effort is concentrated, is capable of communicating with user \\nfunctions that implement the Cloudstate protocol in version 0.5 and is capable of dealing only with Action-type \\nentities, which are stateless entities.\\n\\nIn the next version of our proxy, we will probably no longer support the Cloudstate protocol because, once Cloudstate has been discontinued, we will adopt our own Protocol and entities.\\n\\nWe intend to support all the original project entity types, namely Action **a.k.a.** Stateless support, Event \\nSourcing, Value Entity (CRUD), and CRDTs ([Conflict Free Replicated Data Types](https://crdt.tech/)). We \\nwill just not bring the semantics of the previous protocol, and creating our own protocol to support these entities.\\n\\nSo we are in the process of a complete redesign of our protocol and therefore our proxy as well. We are doing this \\nwith proof of concepts in parallel projects and in project-specific branches within Massa.\\n\\nThis is a summary of what we have done and where we intend to go. I hope to be able to count on your \\ncollaboration in any way, with code, with good discussions, answering doubts, or just making small talk around [here](https://discord.gg/Y55eZpyvNs).\\n\\nI\'m curious to know a little more about you and what you expect from us.\\n\\nAh, I was forgetting, for those who want to know the reasons for the name Massa I suggest reading [here](https://github.com/eigr/massa/blob/main/FAQ.md).\\n\\nThanks for reading!"},{"id":"codebeam-sto-2022","metadata":{"permalink":"/blog/codebeam-sto-2022","editUrl":"https://github.com/eigr/eigr.github.io/edit/main/website/blog/blog/2022-05-19-codebeam-sto-2022.md","source":"@site/blog/2022-05-19-codebeam-sto-2022.md","title":"CodeBEAM Europe, Stockholm 2022","description":"We\'re excited to be selected","date":"2022-05-19T00:00:00.000Z","formattedDate":"May 19, 2022","tags":[{"label":"serverless","permalink":"/blog/tags/serverless"},{"label":"eigr","permalink":"/blog/tags/eigr"}],"readingTime":0.655,"hasTruncateMarker":false,"authors":[{"name":"Marcel Lanz","title":"eigr.io \u2013 Core Team","url":"https://github.com/marcellanz","imageURL":"https://avatars.githubusercontent.com/u/12616445?v=4","key":"marcellanz"}],"frontMatter":{"slug":"codebeam-sto-2022","title":"CodeBEAM Europe, Stockholm 2022","authors":["marcellanz"],"tags":["serverless","eigr"]},"prevItem":{"title":"May 2022 \u2013 Status of the Project","permalink":"/blog/current-status-of-the-project"},"nextItem":{"title":"ACM SIGPLAN, ICFP Erlang Workshop 2021","permalink":"/blog/acm-sigplan-ifcp-erlang-workshop-2021"}},"content":"We\'re excited to be selected\\nfor [one of the main talks](https://codesync.global/speaker/marcel-lanz/#947a-serverless-runtime-on-the-beam) at the\\nCodeBEAM Europe conference in Stockholm in May\\n2022 [CodeBEAM Europe](https://codesync.global/conferences/code-beam-sto-2022/).\\n\\n## Abstract\\n\\nServerless runtimes are often hidden in cloud providers offering and exposed solely by their programming API and\\ndeployment procedures. In this talk, we\'ll explore an open-source Serverless runtime built for the cloud and\\non-premises, running on the BEAM with a polyglot programming model to build general-purpose applications.\\n\\nIn this talk, we\'ll present how the BEAM and OTP are an ideal fit to build a Serverless runtime. After an introduction\\nabout Serverless and a polyglot programming model, we\'ll present the open-source project at eigr.io where we implemented\\nthe core of our runtime based on Erlang/OTP and written in Elixir.\\n\\n**Event:**\\nhttps://codesync.global/speaker/marcel-lanz/#947a-serverless-runtime-on-the-beam\\n\\n**\\nSlides:** [Slideshare](https://www.slideshare.net/MarcelLanz/v13eigrioaserverlessruntimeonthebeampptx/MarcelLanz/v13eigrioaserverlessruntimeonthebeampptx)\\n, [Google Slides](https://docs.google.com/presentation/d/1Km-zh2rItr-setoUJjJV9W43tNZVNJmQtXb3_va_vRQ/edit?usp=sharing)"},{"id":"acm-sigplan-ifcp-erlang-workshop-2021","metadata":{"permalink":"/blog/acm-sigplan-ifcp-erlang-workshop-2021","editUrl":"https://github.com/eigr/eigr.github.io/edit/main/website/blog/blog/2021-08-19-acm-sigplan-icfp-erlang-workshop-2021.md","source":"@site/blog/2021-08-19-acm-sigplan-icfp-erlang-workshop-2021.md","title":"ACM SIGPLAN, ICFP Erlang Workshop 2021","description":"We\'re excited to be selected","date":"2021-08-19T00:00:00.000Z","formattedDate":"August 19, 2021","tags":[{"label":"serverless","permalink":"/blog/tags/serverless"},{"label":"eigr","permalink":"/blog/tags/eigr"}],"readingTime":0.81,"hasTruncateMarker":false,"authors":[{"name":"Marcel Lanz","title":"eigr.io \u2013 Core Team","url":"https://github.com/marcellanz","imageURL":"https://avatars.githubusercontent.com/u/12616445?v=4","key":"marcellanz"}],"frontMatter":{"slug":"acm-sigplan-ifcp-erlang-workshop-2021","title":"ACM SIGPLAN, ICFP Erlang Workshop 2021","authors":["marcellanz"],"tags":["serverless","eigr"]},"prevItem":{"title":"CodeBEAM Europe, Stockholm 2022","permalink":"/blog/codebeam-sto-2022"}},"content":"We\'re excited to be selected\\nfor [one of the Lightning Talks](https://icfp21.sigplan.org/details/erlang-2021-papers/13/Lightning-Talk-eigr-io-A-Serverless-Runtime-on-the-BEAM)\\nright after the Erlang Keynote at the ACM\\nSIGPLAN, [ICFP Erlang Workshop 2021](https://icfp21.sigplan.org/home/erlang-2021).\\n\\n## Abstract\\n\\nServerless runtimes are often hidden in a cloud providers offering and exposed\\nsolely by their programming API and deployment procedures. In this talk, we\u2019ll\\nexplore an open-source Serverless runtime built for the cloud and on-premises,\\nrunning on the BEAM with a polyglot programming model to build general purpose\\napplications.\\n\\nBuilding general purpose applications using multiple languages and having a\\nstory how to handle state was our main motivation to explore the space of a\\nServerless runtime to be built. We think the BEAM, OTP and Elixir/Erlang are a\\nperfect match to build on.\\n\\nWith this talk, we combine herein the world of the BEAM with cloud technology\\nlike a gRPC-based protocol, Kubernetes and a polyglot programming model with\\nlanguages supported like Go, JavaScript, JVM-languages, Python and many more.\\n\\n**Event:**\\nhttps://icfp21.sigplan.org/details/erlang-2021-papers/13/Lightning-Talk-eigr-io-A-Serverless-Runtime-on-the-BEAM\\n\\n**\\nSlides:** [Slideshare](https://www.slideshare.net/MarcelLanz/eigrio-a-serverless-runtime-on-the-beam-acm-sigplan-icfp-2021-erlang-workshop)\\n, [Google Slides](https://docs.google.com/presentation/d/1mLmSFY0z6gxoG88-phcFTwyVBMv8R9myBA5MZOWoJso/edit#slide=id.p1)"}]}')}}]);