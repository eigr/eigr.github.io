"use strict";(self.webpackChunkeigr_io=self.webpackChunkeigr_io||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"spawn-the-actor-mesh","metadata":{"permalink":"/blog/spawn-the-actor-mesh","editUrl":"https://github.com/eigr/eigr.github.io/edit/main/website/blog/blog/2022-09-08-spawn-the-actor-mesh.md","source":"@site/blog/2022-09-08-spawn-the-actor-mesh.md","title":"Welcomne Spawn \u2013 The Actor Mesh","description":"Lately we decided to promote Spawn from eigr-labs to the main eigr github organization//github.com/eigr/spawn.","date":"2022-09-08T00:00:00.000Z","formattedDate":"September 8, 2022","tags":[{"label":"serverless","permalink":"/blog/tags/serverless"},{"label":"cloudstate","permalink":"/blog/tags/cloudstate"},{"label":"eigr-functions","permalink":"/blog/tags/eigr-functions"},{"label":"project","permalink":"/blog/tags/project"},{"label":"status","permalink":"/blog/tags/status"}],"readingTime":2.52,"hasTruncateMarker":false,"authors":[{"name":"Adriano Santos","title":"eigr.io \u2013 Core Team","url":"https://github.com/sleipnir","imageURL":"https://avatars.githubusercontent.com/u/342502?v=4","key":"sleipnir"},{"name":"Marcel Lanz","title":"eigr.io \u2013 Core Team","url":"https://github.com/marcellanz","imageURL":"https://avatars.githubusercontent.com/u/12616445?v=4","key":"marcellanz"}],"frontMatter":{"slug":"spawn-the-actor-mesh","title":"Welcomne Spawn \u2013 The Actor Mesh","authors":["sleipnir","marcellanz"],"tags":["serverless","cloudstate","eigr-functions","project","status"],"draft":false},"nextItem":{"title":"May 2022 \u2013 Status of the Project","permalink":"/blog/current-status-of-the-project"}},"content":"Lately we decided to promote Spawn from eigr-labs to the main eigr github organization: https://github.com/eigr/spawn.\\nAt the same time we archived the massa proxy repository and explained our motivation behind it.\\n\\nIt has been three years ago when we met in a new open source community while we tried to make a\\nthen shiny new project successful\u2013https://cloudstate.io/. While we\'ve discovered and also implemented a communications\\nprocotol for a multitude of programming languages, we constantly iterated on ideas how to build a system that is able to\\nscale and also being usable on many places not only on backend services. At the time we discovered the serverless space,\\nhaving also solved the stateful aspect of it by using a then promising new procotol and concept called Cloudstate. After\\nsome re-priorization with the project as a whole, the core OSS community moved on to build eigr.io and discover our\\nideas under this new umbrella organization https://eigr.io/.\\n\\nOver the last couple of months, Spawn has been shaped by our vision to have a simpler and more focused way to bring an\\nactor system to a polyglot environment, where the way of how components can interact like Actors and Processes do, is\\nnot that well known in other languages. eigr/Massa always was about to solve the challenge of stateful serverless, like\\nit took the vision from its originating project. But at the same time Massa also tried always to solve two things at the\\nsame time. Building a polyglot serverless runtime and also solve the aspect of statefull serverless has been sometimes\\nbeing too much at the same time. Spawn is a focused effort to solve one problem first, and then, being enabled to build\\nthe stateful aspect of serverless on top of it. In this regard, we focus now on something that is that enabler and\\nperhaps one for other problems to solve.\\n\\nThis has been the work of ours lead by Adriano with help from Wesley and Elias; beside that I was able to participate a\\nbit in discussions and presenting our project a two occasions over the last year. I\'m looking forward to see Spawn\\ngrowing into something really cool, special and useful. There is still a lot of work ahead of us and we\'re very exited\\nto see how we can collaborate and grow as a project.\\n\\nWe are 100% focused on making Spawn a robust, scalable, dynamic and expandable platform, taking us far beyond what\\nwe imagined we were capable of in the initial Cloudstate project and with our previous implementation of Massa.\\nMassa has served us brilliantly as a means of experimentation, and now I feel deeply that we are ready to accomplish\\nwhatever we set out to do.\\n\\nWe invite everyone who is here to download and try Spawn and that we are ready to welcome those who want to contribute,\\nwhether with doubts, suggestions, a little code is also welcome, or a text review, any contribution is welcome. We\\ngreatly admire all of you who are interested in our project."},{"id":"current-status-of-the-project","metadata":{"permalink":"/blog/current-status-of-the-project","editUrl":"https://github.com/eigr/eigr.github.io/edit/main/website/blog/blog/2022-05-25-current-state-of-project.md","source":"@site/blog/2022-05-25-current-state-of-project.md","title":"May 2022 \u2013 Status of the Project","description":"My name is Adriano, I\'m a software engineer, I\'m 40 years old, I\'m Brazilian, and I\'ve been in the technology area for over 20 years on different fronts and having worked in a long list of companies, I\'m also the co-founder of the Eigr project together with @marcellanz and @guyso, previously the three of us were core members of the Cloudstate project and mainly worked on the supporting SDKs, but we also participated in the central development of Cloudstate technology and collaborated a lot on the development mainly of its protocol.","date":"2022-05-25T00:00:00.000Z","formattedDate":"May 25, 2022","tags":[{"label":"serverless","permalink":"/blog/tags/serverless"},{"label":"cloudstate","permalink":"/blog/tags/cloudstate"},{"label":"eigr-functions","permalink":"/blog/tags/eigr-functions"},{"label":"project","permalink":"/blog/tags/project"},{"label":"status","permalink":"/blog/tags/status"}],"readingTime":4.075,"hasTruncateMarker":false,"authors":[{"name":"Adriano Santos","title":"eigr.io \u2013 Core Team","url":"https://github.com/sleipnir","imageURL":"https://avatars.githubusercontent.com/u/342502?v=4","key":"sleipnir"}],"frontMatter":{"slug":"current-status-of-the-project","title":"May 2022 \u2013 Status of the Project","authors":["sleipnir"],"tags":["serverless","cloudstate","eigr-functions","project","status"],"draft":false},"prevItem":{"title":"Welcomne Spawn \u2013 The Actor Mesh","permalink":"/blog/spawn-the-actor-mesh"},"nextItem":{"title":"CodeBEAM Europe, Stockholm 2022","permalink":"/blog/codebeam-sto-2022"}},"content":"My name is Adriano, I\'m a software engineer, I\'m 40 years old, I\'m Brazilian, and I\'ve been in the technology area for over 20 years on different fronts and having worked in a long list of companies, I\'m also the co-founder of the Eigr project together with [@marcellanz](https://github.com/marcellanz) and [@guyso](https://github.com/ralphlaude), previously the three of us were core members of the [Cloudstate](https://cloudstate.io/) project and mainly worked on the supporting SDKs, but we also participated in the central development of Cloudstate technology and collaborated a lot on the development mainly of its protocol.\\n\\nI see that many of you have just arrived here and that\'s why I think it\'s important to give an overview of what we do and talk a little about the current status of the project.\\n\\nWell, let\'s go!\\n\\n## Overview:\\n\\nOur ecosystem is called Eigr, and we focus mainly on the following projects:\\n\\n* [Eigr Functions Controller](https://github.com/eigr/eigr-functions-controller): it\'s our deployment brain in Kubernetes, it controls the entire lifecycle of our sidecar along with user functions.\\n\\n* [Massa](https://github.com/eigr/massa): is a Sidecar Proxy and part of the _Eigr Functions_ offering that aims to \\n  provide a high-level abstraction for General Purpose Stateful Serverless application development.\\n\\nMassa is responsible for managing the entire data access infrastructure for user functions, as well as other technical tasks such as providing the implementation of the user contract via [gRPC](https://grpc.io/) to the outside world, [transcoding HTTP requests to gRPC](https://cloud.google.com/endpoints/docs/grpc/transcoding), caching, making requests to external sources when requested and other tasks that would once have to be performed by the developer directly in his application.\\n\\nWith Massa the developer only has to worry about their domain objects and their user service interface via a \\ncontract-first declarative approach. These two components together form Eigr Functions.\\n\\nIn addition to these projects, we also work on several other R&D projects that allow us to understand certain parts \\nof the problem we are trying to solve and thus apply the acquired knowledge to the main projects. Research projects worth noting are the following:\\n\\n* [Falco](https://github.com/eigr/falco): A fork of the elixir-grpc project where we try to improve performance and provide a replacement for the original project that is not being updated by the community that created it. Its development continues in research status.\\n\\n* [Steinadler](https://github.com/eigr-labs/steinadler): A high-level alternative to Erlang Distribution. While we are aware of the incredible capabilities of the Erlang Distribution, we also know that there are numerous deficiencies in this protocol that we are trying to address. Its development is currently at a standstill.\\n\\n* [Spawn](https://github.com/eigr-labs/spawn): The **Actor Mesh Framework** is based on the [sidecar proxy pattern]\\n  (https://dzone.com/articles/sidecar-design-pattern-in-your-microservices-ecosy-1) to provide the multi-language \\n  Actor Model framework. Spawns\' technology-stack on top of the BEAM VM (the Erlang virtual machine) provides support \\n  for different languages from its native Actor model. Spawn is made up of the following components:\\n\\n    1. A semantic protocol based on Protocol Buffers.\\n\\n    2. A Sidecar Proxy written in Elixir that implements this protocol as well as persistent storage adapters.\\n\\n    3. SDKs to support different programming languages.\\n\\n  Spawn is currently in full development where its main parts will likely be incorporated into the core of Massa.\\n\\n* Astreu (https://github.com/eigr/Astreu): High-performance Messaging System based on a gRPC protocol written in \\n  Elixir. Your development is on hold (usable for testing).\\n\\n:::info\\n\\nIn addition to these projects we have the Eigr Functions SDKs which are written in some programming languages \u200b\u200blike \\nElixir, Go, Java and others. Each of these projects is in different phases of development but none are yet readily \\nfunctional.\\n\\n:::\\n\\n## Eigr Functions!\\n\\nCurrently, the Massa project, where our greatest effort is concentrated, is capable of communicating with user \\nfunctions that implement the Cloudstate protocol in version 0.5 and is capable of dealing only with Action-type \\nentities, which are stateless entities.\\n\\nIn the next version of our proxy, we will probably no longer support the Cloudstate protocol because, once Cloudstate has been discontinued, we will adopt our own Protocol and entities.\\n\\nWe intend to support all the original project entity types, namely Action **a.k.a.** Stateless support, Event \\nSourcing, Value Entity (CRUD), and CRDTs ([Conflict Free Replicated Data Types](https://crdt.tech/)). We \\nwill just not bring the semantics of the previous protocol, and creating our own protocol to support these entities.\\n\\nSo we are in the process of a complete redesign of our protocol and therefore our proxy as well. We are doing this \\nwith proof of concepts in parallel projects and in project-specific branches within Massa.\\n\\nThis is a summary of what we have done and where we intend to go. I hope to be able to count on your \\ncollaboration in any way, with code, with good discussions, answering doubts, or just making small talk around [here](https://discord.gg/Y55eZpyvNs).\\n\\nI\'m curious to know a little more about you and what you expect from us.\\n\\nAh, I was forgetting, for those who want to know the reasons for the name Massa I suggest reading [here](https://github.com/eigr/massa/blob/main/FAQ.md).\\n\\nThanks for reading!"},{"id":"codebeam-sto-2022","metadata":{"permalink":"/blog/codebeam-sto-2022","editUrl":"https://github.com/eigr/eigr.github.io/edit/main/website/blog/blog/2022-05-19-codebeam-sto-2022.md","source":"@site/blog/2022-05-19-codebeam-sto-2022.md","title":"CodeBEAM Europe, Stockholm 2022","description":"We\'re excited to be selected","date":"2022-05-19T00:00:00.000Z","formattedDate":"May 19, 2022","tags":[{"label":"serverless","permalink":"/blog/tags/serverless"},{"label":"eigr","permalink":"/blog/tags/eigr"}],"readingTime":0.655,"hasTruncateMarker":false,"authors":[{"name":"Marcel Lanz","title":"eigr.io \u2013 Core Team","url":"https://github.com/marcellanz","imageURL":"https://avatars.githubusercontent.com/u/12616445?v=4","key":"marcellanz"}],"frontMatter":{"slug":"codebeam-sto-2022","title":"CodeBEAM Europe, Stockholm 2022","authors":["marcellanz"],"tags":["serverless","eigr"]},"prevItem":{"title":"May 2022 \u2013 Status of the Project","permalink":"/blog/current-status-of-the-project"},"nextItem":{"title":"ACM SIGPLAN, ICFP Erlang Workshop 2021","permalink":"/blog/acm-sigplan-ifcp-erlang-workshop-2021"}},"content":"We\'re excited to be selected\\nfor [one of the main talks](https://codesync.global/speaker/marcel-lanz/#947a-serverless-runtime-on-the-beam) at the\\nCodeBEAM Europe conference in Stockholm in May\\n2022 [CodeBEAM Europe](https://codesync.global/conferences/code-beam-sto-2022/).\\n\\n## Abstract\\n\\nServerless runtimes are often hidden in cloud providers offering and exposed solely by their programming API and\\ndeployment procedures. In this talk, we\'ll explore an open-source Serverless runtime built for the cloud and\\non-premises, running on the BEAM with a polyglot programming model to build general-purpose applications.\\n\\nIn this talk, we\'ll present how the BEAM and OTP are an ideal fit to build a Serverless runtime. After an introduction\\nabout Serverless and a polyglot programming model, we\'ll present the open-source project at eigr.io where we implemented\\nthe core of our runtime based on Erlang/OTP and written in Elixir.\\n\\n**Event:**\\nhttps://codesync.global/speaker/marcel-lanz/#947a-serverless-runtime-on-the-beam\\n\\n**\\nSlides:** [Slideshare](https://www.slideshare.net/MarcelLanz/v13eigrioaserverlessruntimeonthebeampptx/MarcelLanz/v13eigrioaserverlessruntimeonthebeampptx)\\n, [Google Slides](https://docs.google.com/presentation/d/1Km-zh2rItr-setoUJjJV9W43tNZVNJmQtXb3_va_vRQ/edit?usp=sharing)"},{"id":"acm-sigplan-ifcp-erlang-workshop-2021","metadata":{"permalink":"/blog/acm-sigplan-ifcp-erlang-workshop-2021","editUrl":"https://github.com/eigr/eigr.github.io/edit/main/website/blog/blog/2021-08-19-acm-sigplan-icfp-erlang-workshop-2021.md","source":"@site/blog/2021-08-19-acm-sigplan-icfp-erlang-workshop-2021.md","title":"ACM SIGPLAN, ICFP Erlang Workshop 2021","description":"We\'re excited to be selected","date":"2021-08-19T00:00:00.000Z","formattedDate":"August 19, 2021","tags":[{"label":"serverless","permalink":"/blog/tags/serverless"},{"label":"eigr","permalink":"/blog/tags/eigr"}],"readingTime":0.81,"hasTruncateMarker":false,"authors":[{"name":"Marcel Lanz","title":"eigr.io \u2013 Core Team","url":"https://github.com/marcellanz","imageURL":"https://avatars.githubusercontent.com/u/12616445?v=4","key":"marcellanz"}],"frontMatter":{"slug":"acm-sigplan-ifcp-erlang-workshop-2021","title":"ACM SIGPLAN, ICFP Erlang Workshop 2021","authors":["marcellanz"],"tags":["serverless","eigr"]},"prevItem":{"title":"CodeBEAM Europe, Stockholm 2022","permalink":"/blog/codebeam-sto-2022"}},"content":"We\'re excited to be selected\\nfor [one of the Lightning Talks](https://icfp21.sigplan.org/details/erlang-2021-papers/13/Lightning-Talk-eigr-io-A-Serverless-Runtime-on-the-BEAM)\\nright after the Erlang Keynote at the ACM\\nSIGPLAN, [ICFP Erlang Workshop 2021](https://icfp21.sigplan.org/home/erlang-2021).\\n\\n## Abstract\\n\\nServerless runtimes are often hidden in a cloud providers offering and exposed\\nsolely by their programming API and deployment procedures. In this talk, we\u2019ll\\nexplore an open-source Serverless runtime built for the cloud and on-premises,\\nrunning on the BEAM with a polyglot programming model to build general purpose\\napplications.\\n\\nBuilding general purpose applications using multiple languages and having a\\nstory how to handle state was our main motivation to explore the space of a\\nServerless runtime to be built. We think the BEAM, OTP and Elixir/Erlang are a\\nperfect match to build on.\\n\\nWith this talk, we combine herein the world of the BEAM with cloud technology\\nlike a gRPC-based protocol, Kubernetes and a polyglot programming model with\\nlanguages supported like Go, JavaScript, JVM-languages, Python and many more.\\n\\n**Event:**\\nhttps://icfp21.sigplan.org/details/erlang-2021-papers/13/Lightning-Talk-eigr-io-A-Serverless-Runtime-on-the-BEAM\\n\\n**\\nSlides:** [Slideshare](https://www.slideshare.net/MarcelLanz/eigrio-a-serverless-runtime-on-the-beam-acm-sigplan-icfp-2021-erlang-workshop)\\n, [Google Slides](https://docs.google.com/presentation/d/1mLmSFY0z6gxoG88-phcFTwyVBMv8R9myBA5MZOWoJso/edit#slide=id.p1)"}]}')}}]);