"use strict";(self.webpackChunkeigr_io=self.webpackChunkeigr_io||[]).push([[2515],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),d=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),p=o,f=u["".concat(i,".").concat(p)]||u[p]||m[p]||r;return n?a.createElement(f,l(l({ref:t},c),{},{components:n})):a.createElement(f,l({ref:t},c))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6002:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return c}});var a=n(3117),o=(n(7294),n(3905)),r=n(9652);const l={title:"action.proto",hide_title:!0},s=void 0,i={unversionedId:"cloudstate/action.proto",id:"cloudstate/action.proto",title:"action.proto",description:"action.proto",source:"@site/protodocs/cloudstate/action.proto.mdx",sourceDirName:"cloudstate",slug:"/cloudstate/action.proto",permalink:"/protodocs/cloudstate/action.proto",draft:!1,tags:[],version:"current",frontMatter:{title:"action.proto",hide_title:!0},sidebar:"protodocs",previous:{title:"legacy_entity_key.proto",permalink:"/protodocs/cloudstate/legacy_entity_key.proto"},next:{title:"crdt.proto",permalink:"/protodocs/cloudstate/crdt.proto"}},d={},c=[{value:"<code>action.proto</code>",id:"actionproto",level:2},{value:"Messages",id:"messages",level:2},{value:"<code>ActionCommand</code>",id:"actioncommand",level:3},{value:"<code>ActionResponse</code>",id:"actionresponse",level:3},{value:"Services",id:"services",level:2},{value:"<code>ActionProtocol</code>",id:"actionprotocol",level:3},{value:"<code>handleUnary</code>",id:"handleunary",level:4},{value:"<code>handleStreamedIn</code>",id:"handlestreamedin",level:4},{value:"<code>handleStreamedOut</code>",id:"handlestreamedout",level:4},{value:"<code>handleStreamed</code>",id:"handlestreamed",level:4}],m={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"actionproto"},(0,o.kt)("inlineCode",{parentName:"h2"},"action.proto")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("strong",{parentName:"em"},"path")," cloudstate/action.proto")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("strong",{parentName:"em"},"package")," cloudstate.action")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"messages"},"Messages"),(0,o.kt)("h3",{id:"actioncommand"},(0,o.kt)("inlineCode",{parentName:"h3"},"ActionCommand")),(0,o.kt)(r.ProtoMessage,{key:0,message:{name:"ActionCommand",longName:"ActionCommand",fullName:"cloudstate.action.ActionCommand",description:"An action command.\n\nFor unary and streamed out calls, the service name, command name and payload will always be set.\n\nFor streamed in and duplex streamed calls, the first command sent will just contain the service\nname and command name, but no payload. This will indicate that the action has been invoked.\nSubsequent commands on the stream will only have the payload set, the service name and command\nname will not be set.",hasExtensions:!1,hasFields:!0,hasOneofs:!1,extensions:[],fields:[{name:"service_name",description:"The name of the service this action is on.",label:"",type:"string",longType:"string",fullType:"string",ismap:!1,isoneof:!1,oneofdecl:"",defaultValue:""},{name:"name",description:"Command name",label:"",type:"string",longType:"string",fullType:"string",ismap:!1,isoneof:!1,oneofdecl:"",defaultValue:""},{name:"payload",description:"The command payload.",label:"",type:"Any",longType:"google.protobuf.Any",fullType:"google.protobuf.Any",ismap:!1,isoneof:!1,oneofdecl:"",defaultValue:""},{name:"metadata",description:"Metadata",label:"",type:"Metadata",longType:"cloudstate.Metadata",fullType:"cloudstate.Metadata",ismap:!1,isoneof:!1,oneofdecl:"",defaultValue:"",typeLink:"/protodocs/cloudstate/entity.proto#metadata"}]},mdxType:"ProtoMessage"}),(0,o.kt)("h3",{id:"actionresponse"},(0,o.kt)("inlineCode",{parentName:"h3"},"ActionResponse")),(0,o.kt)(r.ProtoMessage,{key:1,message:{name:"ActionResponse",longName:"ActionResponse",fullName:"cloudstate.action.ActionResponse",description:"",hasExtensions:!1,hasFields:!0,hasOneofs:!0,extensions:[],fields:[{name:"failure",description:"",label:"",type:"Failure",longType:"cloudstate.Failure",fullType:"cloudstate.Failure",ismap:!1,isoneof:!0,oneofdecl:"response",defaultValue:"",typeLink:"/protodocs/cloudstate/entity.proto#failure"},{name:"reply",description:"",label:"",type:"Reply",longType:"cloudstate.Reply",fullType:"cloudstate.Reply",ismap:!1,isoneof:!0,oneofdecl:"response",defaultValue:"",typeLink:"/protodocs/cloudstate/entity.proto#reply"},{name:"forward",description:"",label:"",type:"Forward",longType:"cloudstate.Forward",fullType:"cloudstate.Forward",ismap:!1,isoneof:!0,oneofdecl:"response",defaultValue:"",typeLink:"/protodocs/cloudstate/entity.proto#forward"},{name:"side_effects",description:"",label:"repeated",type:"SideEffect",longType:"cloudstate.SideEffect",fullType:"cloudstate.SideEffect",ismap:!1,isoneof:!1,oneofdecl:"",defaultValue:"",typeLink:"/protodocs/cloudstate/entity.proto#sideeffect"}]},mdxType:"ProtoMessage"}),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"services"},"Services"),(0,o.kt)("h3",{id:"actionprotocol"},(0,o.kt)("inlineCode",{parentName:"h3"},"ActionProtocol")),(0,o.kt)("h4",{id:"handleunary"},(0,o.kt)("inlineCode",{parentName:"h4"},"handleUnary")),(0,o.kt)(r.ProtoServiceMethod,{key:"handleUnary-0",method:{name:"handleUnary",description:"Handle a unary command.\n\nThe input command will contain the service name, command name, request metadata and the command\npayload. The reply may contain a direct reply, a forward or a failure, and it may contain many\nside effects.",requestType:"ActionCommand",requestLongType:"ActionCommand",requestFullType:"cloudstate.action.ActionCommand",requestStreaming:!1,responseType:"ActionResponse",responseLongType:"ActionResponse",responseFullType:"cloudstate.action.ActionResponse",responseStreaming:!1,requestTypeLink:"/protodocs/cloudstate/action.proto#actioncommand",responseTypeLink:"/protodocs/cloudstate/action.proto#actionresponse"},mdxType:"ProtoServiceMethod"}),(0,o.kt)("h4",{id:"handlestreamedin"},(0,o.kt)("inlineCode",{parentName:"h4"},"handleStreamedIn")),(0,o.kt)(r.ProtoServiceMethod,{key:"handleStreamedIn-1",method:{name:"handleStreamedIn",description:"Handle a streamed in command.\n\nThe first message in will contain the request metadata, including the service name and command\nname. It will not have an associated payload set. This will be followed by zero to many messages\nin with a payload, but no service name or command name set.\n\nIf the underlying transport supports per stream metadata, rather than per message metadata, then\nthat metadata will only be included in the metadata of the first message. In contrast, if the\nunderlying transport supports per message metadata, there will be no metadata on the first message,\nthe metadata will instead be found on each subsequent message.\n\nThe semantics of stream closure in this protocol map 1:1 with the semantics of gRPC stream closure,\nthat is, when the client closes the stream, the stream is considered half closed, and the server\nshould eventually, but not necessarily immediately, send a response message with a status code and\ntrailers.\n\nIf however the server sends a response message before the client closes the stream, the stream is\ncompletely closed, and the client should handle this and stop sending more messages.\n\nEither the client or the server may cancel the stream at any time, cancellation is indicated\nthrough an HTTP2 stream RST message.",requestType:"ActionCommand",requestLongType:"ActionCommand",requestFullType:"cloudstate.action.ActionCommand",requestStreaming:!0,responseType:"ActionResponse",responseLongType:"ActionResponse",responseFullType:"cloudstate.action.ActionResponse",responseStreaming:!1,requestTypeLink:"/protodocs/cloudstate/action.proto#actioncommand",responseTypeLink:"/protodocs/cloudstate/action.proto#actionresponse"},mdxType:"ProtoServiceMethod"}),(0,o.kt)("h4",{id:"handlestreamedout"},(0,o.kt)("inlineCode",{parentName:"h4"},"handleStreamedOut")),(0,o.kt)(r.ProtoServiceMethod,{key:"handleStreamedOut-2",method:{name:"handleStreamedOut",description:"Handle a streamed out command.\n\nThe input command will contain the service name, command name, request metadata and the command\npayload. Zero or more replies may be sent, each containing either a direct reply, a forward or a\nfailure, and each may contain many side effects. The stream to the client will be closed when the\nthis stream is closed, with the same status as this stream is closed with.\n\nEither the client or the server may cancel the stream at any time, cancellation is indicated\nthrough an HTTP2 stream RST message.",requestType:"ActionCommand",requestLongType:"ActionCommand",requestFullType:"cloudstate.action.ActionCommand",requestStreaming:!1,responseType:"ActionResponse",responseLongType:"ActionResponse",responseFullType:"cloudstate.action.ActionResponse",responseStreaming:!0,requestTypeLink:"/protodocs/cloudstate/action.proto#actioncommand",responseTypeLink:"/protodocs/cloudstate/action.proto#actionresponse"},mdxType:"ProtoServiceMethod"}),(0,o.kt)("h4",{id:"handlestreamed"},(0,o.kt)("inlineCode",{parentName:"h4"},"handleStreamed")),(0,o.kt)(r.ProtoServiceMethod,{key:"handleStreamed-3",method:{name:"handleStreamed",description:"Handle a full duplex streamed command.\n\nThe first message in will contain the request metadata, including the service name and command\nname. It will not have an associated payload set. This will be followed by zero to many messages\nin with a payload, but no service name or command name set.\n\nZero or more replies may be sent, each containing either a direct reply, a forward or a failure,\nand each may contain many side effects.\n\nIf the underlying transport supports per stream metadata, rather than per message metadata, then\nthat metadata will only be included in the metadata of the first message. In contrast, if the\nunderlying transport supports per message metadata, there will be no metadata on the first message,\nthe metadata will instead be found on each subsequent message.\n\nThe semantics of stream closure in this protocol map 1:1 with the semantics of gRPC stream closure,\nthat is, when the client closes the stream, the stream is considered half closed, and the server\nshould eventually, but not necessarily immediately, close the stream with a status code and\ntrailers.\n\nIf however the server closes the stream with a status code and trailers, the stream is immediately\nconsidered completely closed, and no further messages sent by the client will be handled by the\nserver.\n\nEither the client or the server may cancel the stream at any time, cancellation is indicated\nthrough an HTTP2 stream RST message.",requestType:"ActionCommand",requestLongType:"ActionCommand",requestFullType:"cloudstate.action.ActionCommand",requestStreaming:!0,responseType:"ActionResponse",responseLongType:"ActionResponse",responseFullType:"cloudstate.action.ActionResponse",responseStreaming:!0,requestTypeLink:"/protodocs/cloudstate/action.proto#actioncommand",responseTypeLink:"/protodocs/cloudstate/action.proto#actionresponse"},mdxType:"ProtoServiceMethod"}),(0,o.kt)("hr",null))}u.isMDXComponent=!0},9652:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ProtoMessage=t.ProtoService=t.ProtoServiceMethod=t.ProtoEnum=void 0;var o=a(n(7294)),r=a(n(9960)),l={textAlign:"left"};t.ProtoEnum=function(e){var t=e.enumb;return o.default.createElement(o.default.Fragment,null,o.default.createElement("p",{style:{whiteSpace:"pre-wrap"}},t.description),o.default.createElement("table",null,o.default.createElement((function(){return o.default.createElement("thead",null,o.default.createElement("tr",null,o.default.createElement("th",null,"Name"),o.default.createElement("th",null,"Number"),o.default.createElement("th",null,"Description")))}),null),o.default.createElement((function(){return o.default.createElement("tbody",null,t.values.map((function(e){return o.default.createElement("tr",{key:e.name},o.default.createElement("td",null,o.default.createElement("code",null,e.name)),o.default.createElement("td",null,o.default.createElement("code",null,e.number)),o.default.createElement("td",{style:{whiteSpace:"pre-wrap"}},e.description))})))}),null)))};t.ProtoServiceMethod=function(e){var t=e.method;return o.default.createElement("table",null,o.default.createElement("tbody",null,o.default.createElement("tr",null,o.default.createElement("th",{style:l},"Method"),o.default.createElement("td",null,o.default.createElement("code",null,t.name))),o.default.createElement("tr",null,o.default.createElement("th",{style:l},"Request"),o.default.createElement("td",null,o.default.createElement(r.default,{to:t.requestTypeLink},o.default.createElement("code",null,t.requestType)),!0===t.requestStreaming?" stream":"")),o.default.createElement("tr",null,o.default.createElement("th",{style:l},"Response"),o.default.createElement("td",null,o.default.createElement(r.default,{to:t.responseTypeLink},o.default.createElement("code",null,t.responseType)),!0===t.responseStreaming?" stream":"")),o.default.createElement("tr",null,o.default.createElement("th",{style:l},"Description"),o.default.createElement("td",null,t.description))))};var s=function(e){var n=e.methods;return o.default.createElement(o.default.Fragment,null,n.map((function(e,n){return o.default.createElement(t.ProtoServiceMethod,{method:e,key:e.name+"-"+n})})))};t.ProtoService=function(e){var t=e.service;return o.default.createElement(o.default.Fragment,null,o.default.createElement("p",{style:{whiteSpace:"pre-wrap"}},t.description),o.default.createElement(s,{methods:t.methods}))};var i=function(e){var t=e.fields,n=function(e){var t=e.field,n=o.default.createElement("code",null,t.longType);return void 0===t.typeLink?n:o.default.createElement(r.default,{to:t.typeLink},n)};return o.default.createElement("table",null,o.default.createElement((function(){return o.default.createElement("thead",null,o.default.createElement("tr",null,o.default.createElement("th",null,"Name"),o.default.createElement("th",null,"Type"),o.default.createElement("th",null,"Description")))}),null),o.default.createElement((function(){return o.default.createElement("tbody",null,t.map((function(e){return o.default.createElement("tr",{key:e.name},o.default.createElement("td",null,o.default.createElement("code",null,e.name)),o.default.createElement("td",null,o.default.createElement(n,{field:e})),o.default.createElement("td",{style:{whiteSpace:"pre-wrap"}},e.description))})))}),null))};t.ProtoMessage=function(e){var t=e.message;return o.default.createElement(o.default.Fragment,null,o.default.createElement("p",{style:{whiteSpace:"pre-wrap"}},t.description),o.default.createElement(i,{fields:t.fields}))};t.default=function(e){var n=e.fileDescriptor,a=e.components;return o.default.createElement(o.default.Fragment,null,o.default.createElement(a.h1,null,n.name),o.default.createElement("p",{style:{whiteSpace:"pre-wrap"}},n.description),n.messages.map((function(e,n){return o.default.createElement(t.ProtoMessage,{message:e,key:n})})))}}}]);