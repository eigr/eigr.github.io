"use strict";(self.webpackChunkeigr_io=self.webpackChunkeigr_io||[]).push([[4850],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=c(n),d=r,m=h["".concat(l,".").concat(d)]||h[d]||p[d]||i;return n?o.createElement(m,a(a({ref:t},u),{},{components:n})):o.createElement(m,a({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7918:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return h}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:999},l="History",c={unversionedId:"history",id:"history",isDocsHomePage:!1,title:"History",description:"The Eigr Functions project of eigr.io is based on ideas and concepts that where brought to life with",source:"@site/docs/history.md",sourceDirName:".",slug:"/history",permalink:"/docs/history",editUrl:"https://github.com/eigr/eigr.github.io/edit/main/website/docs/history.md",tags:[],version:"current",sidebarPosition:999,frontMatter:{sidebar_position:999},sidebar:"eigrSidebar",previous:{title:"Glossary of Terms",permalink:"/docs/glossary-of-terms"}},u=[{value:"The Legacy of Cloudstate",id:"the-legacy-of-cloudstate",children:[{value:"A Project in Limbo",id:"a-project-in-limbo",children:[]}]},{value:"Protocol Compatibility and its future",id:"protocol-compatibility-and-its-future",children:[]},{value:"Why on the BEAM?",id:"why-on-the-beam",children:[]}],p={toc:u};function h(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"history"},"History"),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"Eigr Functions")," project of eigr.io is based on ideas and concepts that where brought to life with\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://cloudstate.io"},"Cloudstate"),"\nopen-source project. In the following section we describe why the Eigr Functions project looks similar to Cloudstate and\nwhy it was started at all."),(0,i.kt)("h2",{id:"the-legacy-of-cloudstate"},"The Legacy of Cloudstate"),(0,i.kt)("p",null,"Cloudstate is an open-source project that was started by ",(0,i.kt)("a",{parentName:"p",href:"https://lightbend.com/"},"Lightbend Inc.")," in 2019 and took the\nchallenge to solve one of the harder problems of the classical FaaS model (Function-as-a-Service) in serverless\ncomputing. ",(0,i.kt)("em",{parentName:"p"},"Serverless 1.0"),", as the project stated, lacks the concept to manage state in the world of stateless\nfunctions and therefore burdens the user to integrate some form of state-management into an inherently stateless\narchitecture."),(0,i.kt)("p",null,'Cloudstate started with two promises to "pave the way for Serverless 2.0" to solve that problem:'),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"A standards effort"),"\u2014defining a specification, protocol between the user functions and the backend, and a TCK."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"A reference implementation"),"\u2013implementing the backend and a set of client API libraries in different languages.")),(0,i.kt)("h3",{id:"a-project-in-limbo"},"A Project in Limbo"),(0,i.kt)("p",null,"The decision to fork the Cloudstate project was based on a shift in focus since about mid 2020 of its initiating\norganization ",(0,i.kt)("a",{parentName:"p",href:"https://lightbend.com/"},"Lightbend Inc.")," to pursue\na ",(0,i.kt)("a",{parentName:"p",href:"https://www.lightbend.com/akka-serverless"},"Serverless offering")," of the Cloudstate technology. This focus left the\nopen source project and its community in limbo with no clear roadmap and kept its further development locked where nothing but a fork was an\noption to further work on the vision Cloudstate promised to solve."),(0,i.kt)("p",null,'Members of the eigr.io open-source project have been very supportive and engaged early on in the Cloudstate project.\nAlso, the majority of the Cloudstate "User Language Support\nLibraries" ',(0,i.kt)("a",{parentName:"p",href:"https://github.com/cloudstateio?q=support"},"have been initiated and implemented by that community"),". The Eigr\nFunctions project will build on that work, enhance it, be an open and welcoming community and going forward implementing\nthe original vision of Cloudstate."),(0,i.kt)("h2",{id:"protocol-compatibility-and-its-future"},"Protocol Compatibility and its future"),(0,i.kt)("p",null,'As long as possible, Eigr Functions will try to be compatible with the Cloudstate protocol. Our project has forked the\n"User Language Support Libraries" of Cloudstate to further work on their implementations. Similarly the original TCK, as\nenvisioned, will be used to verify compatibility with the protocol and new polyglot language SDKs of Eigr Functions.'),(0,i.kt)("p",null,"A prerequisite to keep the compatibility intact is, that the currently stale Cloudstate project is willing to adopt\nchange in the future if needed. Its use in Akka Serverless, while being developed as a proprietary and commercial product, has long\nbroken with the Cloudstate protocol. It is unknown if the Akka Serverless SDKs, that are open-sourced, will ever be\ncompatible with Cloudstate again. Nevertheless project eigr\nwould ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cloudstateio/cloudstate/issues/541"},"welcome"),"\nfuture compatibility."),(0,i.kt)("h2",{id:"why-on-the-beam"},"Why on the BEAM?"),(0,i.kt)("p",null,"The decision to switch technical grounds was mainly guided by the fact that Cloudstate went into hibernation mode, and\nit made no sense to re-implement the Cloudstate proxy in Scala and use Akka Cluster itself again. Going with Go or Rust\nwould have been an option. But we realized early on, that competing in a way with the excellent work of the Akka team we\nwould not come soon with a replacement of all what Akka and Akka Cluster provide in the context of this project."),(0,i.kt)("p",null,"With a modern functional language like Elixir and the Erlang Ecosystem in general in its excellent shape these\ndays, it came to us, why not to use the BEAM, Elixir and Erlang/OTP as the technical ground for our new project. Even if\nErlang or Elixir had been exotic languages to be used, the technology and especially the language in which the service\nproxy is written, is irrelevant in the context that enables a cloud-native and therefore polyglot serverless runtime."),(0,i.kt)("p",null,'Eigr Functions being based on Erlang/OTP and running on the BEAM is an excellent fit for a serverless runtime to\nbe built on. The "message in, message out" pattern for a FaaS implementation, as well as the requirements to run\nactually virtual actors in a distributed system is right spot on what OTP, the BEAM and Erlang are all about.'))}h.isMDXComponent=!0}}]);