"use strict";(self.webpackChunkeigr_io=self.webpackChunkeigr_io||[]).push([[4807],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,a(a({ref:t},l),{},{components:n})):r.createElement(g,a({ref:t},l))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9231:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p}});var r=n(3117),i=(n(7294),n(3905));const o={sidebar_position:20},a="Service Proxy \u2013 eigr/massa",s={unversionedId:"projects-functions/eigr-massa",id:"projects-functions/eigr-massa",title:"Service Proxy \u2013 eigr/massa",description:"Clone the repository",source:"@site/docs/projects-functions/eigr-massa.md",sourceDirName:"projects-functions",slug:"/projects-functions/eigr-massa",permalink:"/docs/projects-functions/eigr-massa",draft:!1,editUrl:"https://github.com/eigr/eigr.github.io/edit/main/website/docs/projects-functions/eigr-massa.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"eigrSidebar",previous:{title:"Runtime",permalink:"/docs/projects-functions/eigr-functions"},next:{title:"State Management \u2013 eigr/permastate",permalink:"/docs/projects-functions/eigr-permastate"}},c={},p=[{value:"Clone the repository",id:"clone-the-repository",level:2},{value:"Build",id:"build",level:2},{value:"Run the Action TCK",id:"run-the-action-tck",level:2},{value:"Run the Action TCK Image",id:"run-the-action-tck-image",level:2}],l={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"service-proxy--eigrmassa"},"Service Proxy \u2013 eigr/massa"),(0,i.kt)("h2",{id:"clone-the-repository"},"Clone the repository"),(0,i.kt)("p",null,"To get started with the massa proxy, first clone the project from Github"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git clone https://github.com/eigr/massa.git\n")),(0,i.kt)("h2",{id:"build"},"Build"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"> cd massa\n> mix local.rebar --force\n> mix local.hex --force\n> mix deps.get \n")),(0,i.kt)("h2",{id:"run-the-action-tck"},"Run the Action TCK"),(0,i.kt)("p",null,"As an explanatory example, we will run the Action TCK with the eigr/massa proxy and the Go implementation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"                               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \n                         \u250c\u2500\u2500\u2500\u2500\u25b6\u2502PORT 9001\u2502            \u250c\u2500\u2500\u2500\u25b6\u2502PORT 8080\u2502                    \n\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557   \u2502    \u2554\u2569\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557  \u2502   \u2554\u2569\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551                    \u2551   \u2502    \u2551                    \u2551  \u2502   \u2551      TCK function image      \u2551\n\u2551      grpcurl       \u2560\u2500\u2500\u2500\u2518    \u2551  eigr/massa proxy  \u2560\u2500\u2500\u2518   \u2551                              \u2551\n\u2551                    \u2551        \u2551                    \u2551      \u2551  gcr.io/eigr-io/eigr-go-tck  \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d        \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'> cd apps/massa_proxy\n> mix deps.get && mix format && mix compile\n> iex --name massa-001@127.0.0.1 -S mix\n2021-08-10 16:41:47.723 [massa-001@127.0.0.1]:[pid=<0.591.0> ]:[debug]:Loading config user_function_host with value 0.0.0.0\n2021-08-10 16:41:47.723 [massa-001@127.0.0.1]:[pid=<0.591.0> ]:[debug]:Loading config user_function_port with value 8080\n2021-08-10 16:41:47.723 [massa-001@127.0.0.1]:[pid=<0.591.0> ]:[debug]:Loading config user_function_sock_addr with value /var/run/cloudstate.sock\n2021-08-10 16:41:47.723 [massa-001@127.0.0.1]:[pid=<0.591.0> ]:[debug]:Loading config user_function_uds_enable with value false\n2021-08-10 16:41:47.723 [massa-001@127.0.0.1]:[pid=<0.591.0> ]:[info]: HTTP Server started on port 9001\n2021-08-10 16:41:47.723 [massa-001@127.0.0.1]:[pid=<0.591.0> ]:[info]: Cluster Strategy \n2021-08-10 16:41:47.723 [massa-001@127.0.0.1]:[pid=<0.591.0> ]:[debug]:Cluster topology [proxy: [strategy: Cluster.Strategy.Gossip]]\n2021-08-10 16:41:47.726 [massa-001@127.0.0.1]:[pid=<0.709.0> ]:[debug]:Registry Node :"massa-001@127.0.0.1" joining with Node :"massa-001@127.0.0.1"\n2021-08-10 16:41:47.726 [massa-001@127.0.0.1]:[pid=<0.712.0> ]:[info]: Starting Horde.RegistryImpl with name MassaProxy.GlobalRegistry\n2021-08-10 16:41:47.726 [massa-001@127.0.0.1]:[pid=<0.713.0> ]:[debug]:Supervisor Node :"massa-001@127.0.0.1" joining with Node :"massa-001@127.0.0.1"\n2021-08-10 16:41:47.726 [massa-001@127.0.0.1]:[pid=<0.716.0> ]:[info]: Starting Horde.DynamicSupervisorImpl with name MassaProxy.GlobalSupervisor\n2021-08-10 16:41:47.728 [massa-001@127.0.0.1]:[pid=<0.729.0> ]:[debug]:Initializing Entity Registry with state []\n2021-08-10 16:41:47.728 [massa-001@127.0.0.1]:[pid=<0.730.0> ]:[debug]:Cache State: [cache_name: :cached_servers]\n2021-08-10 16:41:47.728 [massa-001@127.0.0.1]:[pid=<0.731.0> ]:[debug]:Cache State: [cache_name: :reflection_cache]\nInteractive Elixir (1.12.2) - press Ctrl+C to exit (type h() ENTER for help)\niex(massa-001@127.0.0.1)1> 2021-08-10 16:41:47.778 [massa-001@127.0.0.1]:[pid=<0.732.0> ]:[info]: Starting Elixir.MassaProxy.Protocol.Discovery.Manager on target function address tcp://127.0.0.1:8080\n')),(0,i.kt)("h2",{id:"run-the-action-tck-image"},"Run the Action TCK Image"),(0,i.kt)("p",null,"To get started with development one can start one of the TCK images."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'> docker run -it --rm -p 8080:8080 gcr.io/eigr-io/eigr-go-tck-action \n2021/08/10 14:54:37 Received discovery call from sidecar [massa-proxy 0.1.0] supporting Cloudstate 1.1\n2021/08/10 14:54:37 Responding with: service_name:"cloudstate.tck.model.EventSourcedTckModel" service_version:"0.2.0" service_runtime:"go1.14.4 linux/amd64" support_library_name:"cloudstate-go-support" support_library_version:"0.2.0" protocol_minor_version:2\n')),(0,i.kt)("p",null,"Right after the starting the TCK image has been started, the massa proxy will discover the new entity:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"2021-08-10 16:54:38.918 [massa-001@127.0.0.1]:[pid=<0.732.0> ]:[debug]:Service compilation finish!\n2021-08-10 16:54:38.919 [massa-001@127.0.0.1]:[pid=<0.732.0> ]:[debug]:Endpoint Definition:\ndefmodule Massa.Server.Grpc.ProxyEndpoint do\n  @moduledoc false\n  use GRPC.Endpoint\n\n  intercept(GRPC.Logger.Server)\n  intercept(GRPCPrometheus.ServerInterceptor)\n\n  services = [\n    MassProxy.Reflection.Service,\n    Cloudstate.Tck.Model.Action.ActionTckModel.Service.ProxyService,\n    Cloudstate.Tck.Model.Action.ActionTwo.Service.ProxyService,\n  ]\n  run(services)\nend\n2021-08-10 16:54:38.932 [massa-001@127.0.0.1]:[pid=<0.732.0> ]:[debug]:Endpoint compilation finish!\n2021-08-10 16:54:38.932 [massa-001@127.0.0.1]:[pid=<0.732.0> ]:[info]: Starting gRPC Server...\n2021-08-10 16:54:38.933 [massa-001@127.0.0.1]:[pid=<0.2710.0> ]:[info]: Running Massa.Server.Grpc.ProxyEndpoint with Cowboy using http://0.0.0.0:9000\n2021-08-10 16:54:38.933 [massa-001@127.0.0.1]:[pid=<0.732.0> ]:[info]: Started gRPC Server in 1.558888ms\n")),(0,i.kt)("p",null,"It will detect registered services and compile the gRPC stubs needed to serve services. Now, a tool like grpcurl can be\nused to issue a service request against the proxied service:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'> grpcurl -d \'{"groups": {"steps": [{"reply":{"message":"The north face was first climbed on July 24, 1938"}}]}}\' --plaintext localhost:9000 cloudstate.tck.model.action.ActionTckModel.ProcessUnary\n{\n  "message": "\\n8type.googleapis.com/cloudstate.tck.model.action.Response\\u00123\\n1The north face was first climbed on July 24, 1938"\n}\n\n')))}u.isMDXComponent=!0}}]);